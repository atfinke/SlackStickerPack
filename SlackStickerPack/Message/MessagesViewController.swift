//
//  MessagesViewController.swift
//  Message
//
//  Created by Andrew Finke on 3/17/18.
//  Copyright Â© 2018 Andrew Finke. All rights reserved.
//

import UIKit
import Messages
import SlackEmojiKit

class HeaderCell: UICollectionReusableView {
    @IBOutlet weak var label: UILabel!
}

class StickerCell: UICollectionViewCell {
    @IBOutlet weak var stickerView: MSStickerView!
}

class MessagesViewController: MSMessagesAppViewController, UICollectionViewDataSource, UICollectionViewDelegate {

    @IBOutlet weak var collectionView: UICollectionView!

    let emojiManager = SlackEmojiManager()

    override func viewDidLoad() {
        super.viewDidLoad()
        collectionView.delegate = self
        collectionView.dataSource = self
        (collectionView?.collectionViewLayout as? UICollectionViewFlowLayout)?.itemSize = CGSize(width: 20, height: 20)
    }

    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return emojiManager.workspaces.count
    }

     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return emojiManager.workspaces[section].emojis.count
    }

     func collectionView(_ collectionView: UICollectionView,
                         cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "reuseIdentifier",
                                                            for: indexPath) as? StickerCell else {
            fatalError()
        }

        do {
            let emoji = emojiManager.workspaces[indexPath.section].emojis[indexPath.row]
            let sticker = try MSSticker(contentsOfFileURL: emoji.fileURL, localizedDescription: emoji.name)
            cell.stickerView.sticker = sticker
            cell.stickerView.startAnimating()
        } catch {
            fatalError(error.localizedDescription)
        }

        return cell
    }

    func collectionView(_ collectionView: UICollectionView,
                        viewForSupplementaryElementOfKind kind: String,
                        at indexPath: IndexPath) -> UICollectionReusableView {

        //swiftlint:disable:next line_length
        guard let headerCell = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader,
                                                                               withReuseIdentifier: "headerIdentifier",
                                                                               for: indexPath) as? HeaderCell else {
            fatalError()
        }
        headerCell.label.text = emojiManager.workspaces[indexPath.section].team.teamName

        return headerCell
    }

    // MARK: - Conversation Handling

    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.

        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.

        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.

        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
